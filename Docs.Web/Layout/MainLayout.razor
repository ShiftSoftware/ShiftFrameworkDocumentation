@using MudBlazor
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" @ref="_mudThemeProvider" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0" Color="Color.Transparent">
        <MudImage Src="shift-full.png" Height="18" Class="pe-5" />

        <MudButton Href="/" Color="IsHomePage ? Color.Warning : Color.Default" Variant="Variant.Text">Home</MudButton>
        <MudButton Href="/docs" Color="@((IsActive("/docs") ? Color.Warning : Color.Default))" Variant="Variant.Text">Docs</MudButton>
        <MudButton Href="/docs/components/shift-blazor" Color="@((IsActive("/docs/components") ? Color.Warning : Color.Default))" Variant="Variant.Text">Components</MudButton>
        <MudSpacer />

        <MudToggleIconButton @bind-Toggled="_isDarkMode" Icon="@Icons.Material.Filled.WbSunny" Color="@Color.Primary" ToggledIcon="@Icons.Material.Filled.DarkMode" />
    </MudAppBar>

    @if (!IsHomePage)
    {
        <MudDrawer Open ClipMode="DrawerClipMode.Always" Elevation="0">
            <NavMenu />
        </MudDrawer>
    }

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;
    private MudTheme _theme = new()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = "rgba(248, 202, 77, 1)",
            White = "rgba(255, 255, 255, 1)",
        },
        PaletteDark = new PaletteDark()
        {
            Primary = "rgba(248, 202, 77, 1)",
            White = "rgba(255, 255, 255, 1)",
        },
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemDarkModeAsync();
            StateHasChanged();
        }
    }

    private Task OnSystemDarkModeChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private bool IsHomePage =>
    string.IsNullOrEmpty(NavigationManager.ToBaseRelativePath(NavigationManager.Uri).TrimEnd('/'));

    private bool IsActive(string href, bool exact = false)
    {
        var uri = NavigationManager.Uri;
        var relativePath = NavigationManager.ToBaseRelativePath(uri).TrimEnd('/');

        href = href.TrimStart('/');

        if (exact)
        {
            return string.Equals(relativePath, href, StringComparison.OrdinalIgnoreCase);
        }

        return relativePath.StartsWith(href, StringComparison.OrdinalIgnoreCase);
    }
}