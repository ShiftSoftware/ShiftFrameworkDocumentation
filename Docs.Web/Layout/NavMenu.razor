@using MudBlazor
@using Microsoft.AspNetCore.Components.Routing

@implements IDisposable
@inject NavigationManager NavigationManager

<MudNavMenu Color="Color.Warning">
    <MudNavLink Href="/docs" Match="NavLinkMatch.All">Overview</MudNavLink>

    <MudNavGroup Title="Getting Started" Expanded="@(IsActive("/docs/"))">
        <MudNavLink Href="/docs/installation" Match="NavLinkMatch.Prefix">Installation</MudNavLink>
    </MudNavGroup>

    <MudNavGroup Title="Components" Expanded="@(IsActive("/components"))">
        <MudNavLink Href="/components" Match="NavLinkMatch.All">Overview</MudNavLink>
        @foreach (var (title, path) in ComponentPages)
        {
            <MudNavLink Href="@("/components/" + path)" Match="NavLinkMatch.All">@title</MudNavLink>
        }
    </MudNavGroup>

    <MudNavGroup Title="Component APIs" Expanded="@(IsActive("/components/api"))">
        @foreach (var (title, path) in ComponentPages)
        {
            <MudNavLink Href="@("/components/api/" + path)" Match="NavLinkMatch.All">@title</MudNavLink>
        }
    </MudNavGroup>

    <MudNavGroup Title="Entities & Repositories" Expanded="@(IsActive("data"))">
        <MudNavLink Href="/data/shift-entity" Match="NavLinkMatch.Prefix">Shift Entity</MudNavLink>
        <MudNavLink Href="/data/shift-repository" Match="NavLinkMatch.Prefix">Shift Repository</MudNavLink>
    </MudNavGroup>

    <MudNavGroup Title="AspNetCore APIs" Expanded="@(IsActive("asp"))">
        <MudNavLink Href="/asp/shift-entity-controller" Match="NavLinkMatch.Prefix">Controllers</MudNavLink>
    </MudNavGroup>

    <MudNavGroup Title="TypeAuth" Expanded="@(IsActive("type-auth"))">
        <MudNavLink Href="/type-auth/actions" Match="NavLinkMatch.Prefix">Actions</MudNavLink>
    </MudNavGroup>
</MudNavMenu>

@code {

    private readonly List<(string Name, string UrlPathName)> ComponentPages = new()
    {
        ("Shift Autocomplete", "shift-auto-complete"),
        ("File Explorer", "file-explorer")
    };

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private bool IsActive(string href, bool exact = false)
    {
        var uri = NavigationManager.Uri;
        var relativePath = NavigationManager.ToBaseRelativePath(uri).TrimEnd('/');

        href = href.TrimStart('/');

        if (exact)
        {
            return string.Equals(relativePath, href, StringComparison.OrdinalIgnoreCase);
        }

        return relativePath.StartsWith(href, StringComparison.OrdinalIgnoreCase);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}